The Anatomy of a State Transition

	This document describes the behaviour of the generated state machine. It helps to explain what happens to the
	parts of a Node and Transition in the state model.
	
	Each State Transition as carried out in response to the "step" method. The "step" method will be generated
	with the name of the state model. For example a model called "gps" will have a step method "gpsStep".
	The calling procedure is to set up the input variable then call this method.
	
	Considering the anatomy of a Node:
	
[images/NodeAndTransitionModel.png] Model of a node and its transitions
	
	On calling the Step method:
	
	* The Step method will "GOTO" the current Node, pointed to by the Node Pointer.
	
	* The Node will scan through its transitions in the order defined, looking for a match that satisfies both the preconditions for
	  the transition and any entry conditions for the target node.
	
		* If satisfied then any transition commands will be executed followed by any entry commands for the target node.
		
		* All Nodes will be generated such that at least one transition will match. The fallback transition resets the
		  state machine to its Initial State. This is in keeping with a system designed to parse input data.
	
	* The node pointer is then set to point to the target node and control is returned to the calling program.
	
	[]
	
Skipping Node Entry Commands

 	Transitions can be set to skip the entry commands associated with the target node. This feature is used to
 	create the number parsing state machines. For example a state machine that reads data into an array will
 	set the array index to zero when first entered. By allowing a "transition to self" that does not process
 	that reset, it is possible to read the array without needing an additional state for subsequent bytes.
 	
Subroutines

    Subroutines are implemented as Commands in the above model. This results in subroutines acting
    as interruptions to normal transitions. A subroutine may be inserted in a transition or placed
    as an entry command in a node.
    
    The state engine supports a single
    stack level. Attempts to go deeper overwrite the stack. Attempts to return when not in a subroutine
    will likely cause a crash or unexpected behaviour.
    
    The Enter Subroutine command stores the location of the next instruction on the stack.
    It then renders a "Go to Node" command to switch to the subroutine as if it was the next
    state.
    
    The Return from Subroutine command branches to the instruction located on the stack. This
    will cause the transition that entered the subroutine to continue. Note that transitions
    always render all preconditions before rendering commands. The means that it is not possible
    to insert conditions after the subroutine returns before the target node is entered.
~~ If we ever need to then we could consider a form of "immediate node" that renders its switching
~~ code as a shared entry method.
