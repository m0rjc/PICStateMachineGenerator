<?xml version="1.0" encoding="UTF-8"?>
<StateGeneratorRun xmlns="http://uk.me.m0rjc/picstategenerator">
	<Model name="gps" root="root" inputVariable="gpsInput">
		<Symbols>
			<Symbol name="gpsInput" loc="accessram" decl="global" />
			<Symbol name="gpsFlags" loc="accessram" decl="global">
				<Flags>
					<Flag>NEW_POSITION</Flag>
					<Flag>NORTH</Flag>
					<Flag>EAST</Flag>
					<!-- Command to the test code to send information back to the host. -->
					<Flag>TEST_PLEASE_SEND</Flag>
					<Flag>Test4</Flag>
					<Flag>Test5</Flag>
					<Flag>Test6</Flag>
					<Flag>Test7</Flag>
					<!-- Test a 2 byte flags variable -->
					<Flag>Test8</Flag>
					<Flag>Test9</Flag>
				</Flags>
			</Symbol>
			<Symbol name="gpsTime" size="6" loc="page1" decl="global" />
			<Symbol name="gpsQuality" size="1" loc="page1" decl="global" />
			<Symbol name="gpsLongitudeDegMin" size="5" loc="page1" decl="global" />
			<Symbol name="gpsLongitudeHundredths" size="2" loc="page1" decl="global" />
			<Symbol name="gpsLatitudeDegMin" size="4" loc="page1" decl="global" />
			<Symbol name="gpsLatitudeHundredths" size="2" loc="page1" decl="global" />
			<Symbol name="PORTC" size="1" decl="none" loc="accessram">
				<Flags>
					<Flag>C0</Flag>
					<Flag>C1</Flag>
					<Flag>C2</Flag>
					<Flag>C3</Flag>
					<Flag>C4</Flag>
					<Flag>C5</Flag>
					<Flag>C6</Flag>
					<Flag>C7</Flag>
				</Flags>
			</Symbol>
			<!-- When TEST_PLEASE_SEND is set, this indicates the variable to send. -->
			<Symbol name="testSendVar" size="1" loc="page1" decl="global" />
			<!-- When TEST_PLEASE_SEND is set, this indicates the offset relative to the variable -->
			<Symbol name="testSendIndex" size="1" loc="page1" decl="global" />
		</Symbols>
		<Nodes>
			<Node name="root">
				<EntryCommands>
					<SetFlag flag="C0" variable="PORTC" value="false"/>
				</EntryCommands>
				<Transition input="'$'" target="dollar" />
				
				<!-- Test framework -->
				<Script>
					<Literal>!!</Literal>
					<GuardCondition>
						<FlagCheck flag="TEST_PLEASE_SEND" variable="gpsFlags" value="false"/>
					</GuardCondition>
					<Commands>
						<SetFlag flag="C1" variable="PORTC" value="true"/>
					</Commands>
					<Literal>TEST-SEND:</Literal>
					<Numbers max="1" min="1" store="testSendVar"/>
					<Literal>:</Literal>
					<Numbers max="1" min="1" store="testSendIndex"/>
					<!--  Literal>!!</Literal -->
					<Commands>
						<SetFlag flag="TEST_PLEASE_SEND" variable="gpsFlags" value="true"/>
						<SetFlag flag="C1" variable="PORTC" value="false"/>
					</Commands>
				</Script>
			</Node>
			
			<!-- Subroutine to read a GPS 6 digit time.
			     Starts with the comma just read. Ends reading the last comma. -->
			<Node name="readGpsTime">
				<Script>
					<Numbers min="6" max="6" store="gpsTime" />
					<SkipTo>
						<Choice input="'$'" target="dollar" />
						<Choice input="','" />
					</SkipTo>
					<Return/>
				</Script>
			</Node>
			
			<!-- Subroutine to read lat long.
			     Starts with the comma just read. Ends reading the last comma. -->
			<Node name="readLatLong">
				<Script>
					<Numbers min="4" max="4" store="gpsLatitudeDegMin" />
					<Literal>.</Literal>
					<Numbers max="2" min="2" store="gpsLatitudeHundredths" />
					<SkipTo>
						<Choice input="'$'" target="dollar" />
						<Choice input="','" />
					</SkipTo>
					<Choices>
						<Choice input="'S'">
							<Commands>
								<SetFlag flag="NORTH" variable="gpsFlags"
									value="false" />
							</Commands>
						</Choice>
						<Choice input="'N'">
							<Commands>
								<SetFlag flag="NORTH" variable="gpsFlags"
									value="true" />
							</Commands>
						</Choice>
					</Choices>
					<Literal>,</Literal>
					<Numbers max="5" min="5" store="gpsLongitudeDegMin" />
					<Literal>.</Literal>
					<Numbers max="2" min="2" store="gpsLongitudeHundredths" />
					<SkipTo>
						<Choice input="'$'" target="dollar" />
						<Choice input="','" />
					</SkipTo>
					<Choices>
						<Choice input="'E'">
							<Commands>
								<SetFlag flag="EAST" variable="gpsFlags" value="true" />
							</Commands>
						</Choice>
						<Choice input="'W'">
							<Commands>
								<SetFlag flag="EAST" variable="gpsFlags" value="false" />
							</Commands>
						</Choice>
					</Choices>
					<Literal>,</Literal>
					<Return/>
				</Script>			
			</Node>
			<Node name="dollar">
				<EntryCommands>
					<SetFlag flag="C0" variable="PORTC" value="true"/>
				</EntryCommands>
				<Script description="Read a GPGGA location string">
					<Literal>GPGGA</Literal>
					<GuardCondition>
						<FlagCheck variable="gpsFlags" flag="NEW_POSITION"	value="false" />
					</GuardCondition>
					<Literal>,</Literal>
					<GoSub>readGpsTime</GoSub>
					<GoSub>readLatLong</GoSub>
					<Choices>
						<Choice input="*">
							<Commands>
								<StoreValue destination="gpsQuality"/>
							</Commands>
						</Choice>
					</Choices>
					<Commands>
						<SetFlag variable="gpsFlags" flag="NEW_POSITION" value="true" />
					</Commands>
				</Script>
			</Node>
		</Nodes>
	</Model>
	<UnitTests>
		<Test>
			<Description>GPGGA with valid fix stores fix</Description>
			<Input>$GPGGA,060932.448,2447.0959,N,12100.5204,E,1,08,1.1,108.7,M,,,,0000*0E</Input>
			<AssertEquals variable="gpsTime" string="060932" />
			<AssertEquals variable="gpsLatitudeDegMin" string="2447" />
			<AssertEquals variable="gpsLatitudeHundredths" string="09" />
			<AssertFlag flag="NORTH" variable="gpsFlags" value="true" />
			<AssertEquals variable="gpsLongitudeDegMin" string="12100" />
			<AssertEquals variable="gpsLongitudeHundredths" string="52" />
			<AssertFlag flag="EAST" variable="gpsFlags" value="true" />
			<AssertEquals variable="gpsQuality" string="1" />
			<AssertFlag flag="NEW_POSITION" variable="gpsFlags" value="true" />
		</Test>
		<Test>
			<Description>GPGGA with an existing unread fix does not overwrite</Description>
			<Input>
  			$GPGGA,060932.448,2447.0959,S,12100.5204,W,1,08,1.1,108.7,M,,,,0000*0E
  			$GPGGA,123432.001,6031.0959,N,14100.5204,E,1,08,1.1,108.7,M,,,,0000*??
  			</Input>
			<AssertEquals variable="gpsTime" string="060932" />
			<AssertEquals variable="gpsLatitudeDegMin" string="2447" />
			<AssertEquals variable="gpsLatitudeHundredths" string="09" />
			<AssertFlag flag="NORTH" variable="gpsFlags" value="false" />
			<AssertEquals variable="gpsLongitudeDegMin" string="12100" />
			<AssertEquals variable="gpsLongitudeHundredths" string="52" />
			<AssertFlag flag="EAST" variable="gpsFlags" value="false" />
			<AssertEquals variable="gpsQuality" string="1" />
			<AssertFlag flag="NEW_POSITION" variable="gpsFlags" value="true" />
		</Test>
		<Test>
			<Description>Test framework command</Description>
			<Input>
			!!TEST-SEND:4:1
  			</Input>
			<AssertEquals variable="testSendVar" string="4" />
			<AssertEquals variable="testSendIndex" string="1" />
			<AssertFlag flag="TEST_PLEASE_SEND" variable="gpsFlags" value="true" />
		</Test>
	</UnitTests>
	<Output>
		<Pic18 processor="18F14K50">
			<Include>p18f14k50.inc</Include>
		</Pic18>
	</Output>
</StateGeneratorRun>
