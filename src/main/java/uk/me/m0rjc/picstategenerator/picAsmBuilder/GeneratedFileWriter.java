package uk.me.m0rjc.picstategenerator.picAsmBuilder;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Common support for writing generated files.
 */
abstract class GeneratedFileWriter extends Writer
{
    /** True if the file has been opened and a header written. */
    private boolean m_fileStarted;

    /** Name of the file for log reporting. */
    private String m_fileName;

    /** Output writer. */
    private final Writer m_out;

    /** Write a line or end of line comment.
     * @param string line to write.
     */
    public abstract void writeComment(String string);

    /** End of a block comment. */
    public abstract void endBlockComment();

    /** A line in a block comment.
     * @param line comment text to write.
     */
    public abstract void writeBlockCommentLine(String line);

    /** Start a block comment. */
    public abstract void startBlockComment();

    /** Have I encountered an error? */
    private boolean m_error;

    /** Logging. */
    protected final Logger m_log = Logger.getLogger(getClass().getName());

    /** Code indent counting. */
    private int m_indent;

    public GeneratedFileWriter(String fileName)
    {
        Writer out = null;
        m_fileName = fileName;
        try
        {
            out = new FileWriter(fileName);
            m_log.info(String.format("Generating file %s",
                    new File(fileName).getAbsolutePath()));
        }
        catch (IOException e)
        {
            m_error = true;
            m_log.log(Level.SEVERE, "Unable to open output file", e);
        }
        m_out = out;
    }

    /**
     * Increase indent.
     */
    public void indent()
    {
        m_indent++;
    }

    /**
     * Decrease indent.
     */
    public void unindent()
    {
        m_indent--;
        if (m_indent < 0)
            m_indent = 0;
    }

    /** Write sufficient blank space for the current indent */
    protected abstract void writeIndent();

    /** Write a blank line to the output file */
    public void blankLine()
    {
        write("\n");
    }

    /** Write to the output, handling error if needed */
    @Override
    public void write(String line)
    {
        ensureFileStarted();

        if (!m_error)
        {
            try
            {
                m_out.write(line);
            }
            catch (IOException e)
            {
                m_error = true;
                m_log.log(Level.SEVERE, "Unable to write to output file", e);
                try
                {
                    m_out.close();
                }
                catch (Exception e2)
                {
                }
            }
        }
    }

    /** Write lines */
    public void writeln(String... lines)
    {
        for (String line : lines)
        {
            write(line);
            write("\n");
        }
    }

    private void ensureFileStarted()
    {
        if (!m_fileStarted)
        {
            m_fileStarted = true; // Prevent infinite recursion
            startFile();
        }
    }

    /** Output the start of file header */
    private void startFile()
    {
        startBlockComment();
        writeBlockCommentLine("This file was auto-generated by PICStateGenerator. Do not edit.");
        writeBlockCommentLine("Generated: " + new Date());
        endBlockComment();
    }

    /**
     * Write a blank line followed by a block comment.
     * 
     * @param lines
     *            lines to make up the block comment.
     */
    public void blockComment(String... lines)
    {
        blankLine();
        startBlockComment();
        for (String line : lines)
        {
            writeBlockCommentLine(line);
        }
        endBlockComment();
    }

    @Override
    public void close() throws IOException
    {
        m_out.close();
    }

    /**
     * Call close and handle the close exception.
     */
    public void safeClose()
    {
        try
        {
            close();
        }
        catch (IOException e)
        {
            m_log.log(Level.SEVERE, "Exception closing: " + m_fileName + ": "
                    + e.getMessage(), e);
            m_error = true;
        }
    }

    @Override
    public void flush() throws IOException
    {
        m_out.flush();
    }

    @Override
    public void write(char[] cbuf, int off, int len) throws IOException
    {
        ensureFileStarted();
        m_out.write(cbuf, off, len);
    }

    /** @return the current code indent for writing pretty code. */
    protected int getIndent()
    {
        return m_indent;
    }

    /**
     * Output a preprocessor instruction.
     * @param instruction the instruction, for example "#define FOO 42"
     */
    public void writePreprocessor(final String instruction)
    {
        writeln(instruction);
    }
}
